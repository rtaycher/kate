TODO:
  A current todo list is available on:
    http://kate.babylon2k.com/index.php/Work_todo

**** Bugs ****
* access of deleted cursors by the dynamic hl stuff


**** Refactoring/Cleanups ****

* KateViewInternal to be completely hidden from view for almost everything but
  the view itself.

  -> in progress, almost done for most parts, viewinternal only visible to friends of KateView

* Separate more functionality from KateDocument (selections moving to KateView,
  a plugin manager class, a config class, etc)

  -> in progress:
      * config classes already in place
      * selection moved to KateView

**** new features ****

* Fix EOL whitespace cleaning finally by removing whitespace at load-time and
  keeping the document consistent all the time

  -> DONE ;) whitespaces are no cleaned at load time, the magic clean on save stuff is gone
  Ah, but there are bugs:
  * indenting a block of text will create whitespace on lines that were empty to start with

* BiDi finally, using Scribe
  * just needs porting of deprecated calls, and testing
  * fix remaining redraw bugs while scrolling (grey, black areas)

* Fix word wrap indicators

* Test mouse smartcursor (in kateviewinternal)

* Finally implement arbitrary highlighting and arbitrary input filtering
  * Smart Cursors and Ranges todo list:
    * change edit notification to come as KTextEditor::EditInfo or similar
      * types: Insert, Remove, Change, Batch -> more EditInfos
      * Implement batching
        * multiple edits for one logical edit
        * multiple logical edits for one undo step
    * fix passive changes to cursors/ranges
      * extra regression testing needed to check that notifications work across SmartGroup boundaries
      * implement feedback requirement tree
    * add a QVariant as data store for 3rd party apps
    * D-pointer consideration
    * move back any excessively exposed parts of the smart ranges and cursors
    * testcases
    * performances testing suite
    * cachegrinding
    * make a translation snapshot feature where you can translate any cursor from a certain point in time - would be very cool :)
    * code cleanup
      * add advance{Pos|Line|Column} functions and replace the set*(*+x) calls

* Switch internal highlighting to use arbitrary highlighting api and thus be
  exposed (read-only)
  * only if the above cursors and ranges can be made to perform well enough

* Buffer reentrancy for multithreaded access
  * needed for potential:
    * separate threads for processing of bracket marks,
    * third party processing

* More robust history including cursor position history

* More featureful code completion including syntax highlighted entries

* Custom widgets in between lines interface (eg. so kcachegrind could use
  katepart to display its cpu usage information etc)
  * Add an extraHeight() field to KateLineLayout
  * Change linesDisplayed() over to use these extra heights
  * Remove assumptions about the fixed height of lines (the difficult part? maybe not so hard seeing it supports dynamic wrapping)
  * Expose via an interface

* KateFoldingTree* to use smart*

* Splitting a view over multiple columns

* Modular input subsystem, to support emulation of other editors in a clean way

* Improved input modes especially in block selection

* Multiple selection support

* Better support for information overlay (eg. documentation of a function -
  switch between short / detailed descriptions)

* Whatever else is needed for multiuser editing (and perhaps put most of it
  inside the part, so eg. kate, kdevelop, quanta etc. could all use it)

* Scripting (we don't have any yet do we?)

  -> in progress, part gets kjs support, already working, but API needs to be
     finished and a clever way to let scripts register for the katecmdline needs to
     be implemented, with caching and all other cool things the world doesn'T or does
     need

* Cursor position restriction extension
  * export enough api to allow 3rd party apps to provide a cursor that
    * handles advancing/retreating
    * allows to query if a position is a valid cursor position, and to find the closest valid position
  * create a test version which does some basic restriction

* Input restriction extension
  * needed? probably not